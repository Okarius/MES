package Model;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Observable;

import javax.microedition.io.StreamConnection;

import Container.InternMessage;
import Model.HeaderWorker.ContentType;
import Services.ServiceManager;

/**
 * This Runnable is used in a thread which respresends a singel Client-Server
 * connection. They are spereated by an id. have their own StreamConnection and
 * every connection has its own serviceManager to create the answers. This
 * Runnable is used to create Threads in the AllConnectionsRunnable. Every
 * connection gets its own Thread. This Runnable is Observed by the
 * AllConnectionsRunanble. It passes every Msg sent and received forward.
 * 
 * @author Nikolas+Nico
 *
 */
public class ClientConnectionRunnable extends Observable implements Runnable {

	private StreamConnection conn;
	private int id;
	private ServiceManager serviceManager;
	private HeaderWorker headerWorker;

	public ClientConnectionRunnable(StreamConnection connection, int id) {
		conn = connection;
		serviceManager = new ServiceManager();
		headerWorker = new HeaderWorker();
		this.id = id;
	}

	@Override
	public void run() {
		try {
			changeData(new InternMessage("Start ConnectionsThread"));
			DataInputStream din = new DataInputStream(conn.openInputStream());
			DataOutputStream out = new DataOutputStream(conn.openOutputStream());
			while (true) {
				byte[] buffer = new byte[(int) Math.pow(10, 9)];
				String readMessage;
				int bytes;
				if (din.available() > 0) {
					try {
						// Read from the InputStream
						bytes = din.read(buffer);
						readMessage = new String(buffer, 0, bytes);
						respondToClient(out, readMessage);
					} catch (Exception e) {
						changeData(new InternMessage("Stop ConnectionsThreadUpper"));
					}
				} else {
					// Thread.sleep(100);
				}
			}
		} catch (Exception e) {
			changeData(new InternMessage("Stop ConnectionsThreadBottom"));
		}
	}

	public void startThis() {
		Thread t = new Thread(this);
		t.start();
	}

	/**
	 * This funktion handles every incoming msg and deceides how to answer. It
	 * also send the Msgs thus it gets the DataOutputStream. What the Server
	 * answers is decided by the ServiceMangaer which uses the Service itself.
	 * After the Answer is created the Observer(AllConnectionsRunnable) will be
	 * informed about this message
	 * 
	 * @param out
	 * @param lineRead
	 * @throws IOException
	 */
	private void respondToClient(DataOutputStream out, String lineRead) throws IOException {
		String payloadReceived = lineRead.substring(8, lineRead.length());
		changeData(new InternMessage("PayLoad: " + payloadReceived, true, this.id));
		byte[] headerToSend = new byte[0];
		byte[] payLoadToSend = new byte[0];
		byte[] messageToSend = new byte[0];
		byte[] headerReceived = lineRead.substring(0, 8).getBytes();
		changeData(new InternMessage(headerReceived, true, this.id,
				headerWorker.extractLengthFromHeader(headerReceived), headerWorker.extractIdFromHeader(headerReceived),
				headerWorker.extractChecksumFromHeader(headerReceived),
				headerWorker.extractFaultyBitFromHeader(headerReceived)));
		// Check if Payload is correct
		if (headerWorker.isChecksumCorrect(payloadReceived.getBytes(),
				headerWorker.extractChecksumFromHeader(headerReceived))) {
			payLoadToSend = serviceManager.getAnswer(payloadReceived);

			headerToSend = headerWorker.makeHeader(payLoadToSend, ContentType.STRING,
					headerWorker.extractIdFromHeader(headerReceived), false);
		} else {
			// Checksum is faulty:
			payLoadToSend = "Error;Fauly Checksum".getBytes();

			headerToSend = headerWorker.makeHeader(payLoadToSend, ContentType.STRING,
					headerWorker.extractIdFromHeader(headerReceived), true);
		}
		messageToSend = new byte[headerToSend.length + payLoadToSend.length];
		System.arraycopy(headerToSend, 0, messageToSend, 0, headerToSend.length);
		System.arraycopy(payLoadToSend, 0, messageToSend, headerToSend.length, payLoadToSend.length);
		changeData(new InternMessage(headerToSend, false, this.id, headerWorker.extractLengthFromHeader(headerToSend),
				headerWorker.extractIdFromHeader(headerToSend), headerWorker.extractChecksumFromHeader(headerToSend),
				headerWorker.extractFaultyBitFromHeader(headerToSend)));

		changeData(new InternMessage("Payload: " + serviceManager.getLastMsgSend(), false, this.id));
		out.write(messageToSend);

	}

	private void changeData(Object data) {
		setChanged(); // the two methods of Observable class
		notifyObservers(data);
	}

}

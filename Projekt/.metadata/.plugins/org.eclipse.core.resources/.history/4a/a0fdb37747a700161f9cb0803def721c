package Model;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.invoke.SwitchPoint;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

import javax.bluetooth.DeviceClass;
import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.DiscoveryListener;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.RemoteDevice;
import javax.bluetooth.ServiceRecord;
import javax.bluetooth.UUID;
import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import javax.microedition.io.StreamConnectionNotifier;
/**
 * 
 * @author root
 *
 */
public class Server extends Observable {
	private ArrayList<String> inquiredDevices;

	public final UUID uuid = new UUID("0000110100001000800000805F9B34FB", false);
	public final String name = "Echo Server"; // the name of the service
	public final String url = "btspp://localhost:" + uuid // the service url
			+ ";name=" + name + ";authenticate=false;encrypt=false;";
	LocalDevice local = null;
	StreamConnectionNotifier server = null;
	StreamConnection conn = null;

	public Server() {
		inquiredDevices = new ArrayList<String>();

	}
	
	public void Inquire(){
		InquireHandler inquirer = new InquireHandler();
		this.inquiredDevices = inquirer.inquire();
		changeData(this.inquiredDevices);
	}
	
	public void newConnection(){
        Thread waitThread = new Thread(new WaitForConnections());
        waitThread.start();		
	}
	
	// this funktion resets model
	public void reset() {
		inquiredDevices.clear();
		changeData(this.inquiredDevices);
	}

	private void changeData(Object data) {
		setChanged(); // the two methods of Observable class
		notifyObservers(data);
	}


	
}

package Model;

import java.io.IOException;
import java.util.ArrayList;

import javax.bluetooth.DeviceClass;
import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.DiscoveryListener;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.RemoteDevice;
import javax.bluetooth.ServiceRecord;

public class Inquire {

	
	/*
	 * This funktion performs inquire It is called after "inquire" button is
	 * pressed
	 */
	public ArrayList<String> inquire() {
		ArrayList<String> inquiredDevices = new ArrayList<String>();
		/* Create Vector variable */
		final ArrayList<String> devicesDiscovered = new ArrayList<String>();
		try {
			final Object inquiryCompletedEvent = new Object();
			/* Clear Vector variable */
			devicesDiscovered.clear();
			/* Create an object of DiscoveryListener */
			DiscoveryListener listener = new DiscoveryListener() {
				public void deviceDiscovered(RemoteDevice btDevice, DeviceClass cod) {
					// Get devices paired with system or in range(Without Pair)
					try {
						devicesDiscovered.add(btDevice.getFriendlyName(true));
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				public void inquiryCompleted(int discType) {
					/* Notify thread when inquiry completed */
					synchronized (inquiryCompletedEvent) {
						inquiryCompletedEvent.notifyAll();
					}
				}

				/* To find service on bluetooth */
				public void serviceSearchCompleted(int transID, int respCode) {
				}

				/* To find service on bluetooth */
				public void servicesDiscovered(int transID, ServiceRecord[] servRecord) {
				}
			};

			synchronized (inquiryCompletedEvent) {
				/* Start device discovery */
				boolean started = LocalDevice.getLocalDevice().getDiscoveryAgent().startInquiry(DiscoveryAgent.GIAC,
						listener);
				if (started) {
					System.out.println("wait for device inquiry to complete...");
					inquiryCompletedEvent.wait();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/* Return list of devices */
		inquiredDevices.addAll(devicesDiscovered);
		return inquiredDevices
	}

	

}
